require(diversitree)

set.seed(34344)
test.tree = tree.bisse(c(0.1, 0.1, 0.03, 0.03, 0.01, 0.07), x0=0, max.taxa = 50)

sim.character(tree, pars=c(.1,.3), x0=c(0), model="mk2", br=NULL)

test.like = two.state.part.like(test.tree, test.tree$tip.state, 0.02, 0.05)
test.like[51,]


#----


sim.UB <- simUnrepBurst(ntips=1000, n.trees.sim=2, Upper.otu.bound=0.6, Lower.otu.bound=0.4, Q, p.root=c(1,0,0,0), freq.threshhold=5)

# Plot
i <- 1
tree <- sim.UB[[i]]$tree
chars <- cbind(sim.UB[[i]]$states.binary[[1]], sim.UB[[i]]$states.binary[[2]], sim.UB[[i]]$states.original.recoded)
plot.phylo(tree, edge.width = 3, show.tip.label = T, no.margin = T, label.offset=10, tip.color='white' )
addTipChars(chars,  r=.4,  x.space=3, legend=T)

#---

sim.div1 <- sim.character(tree, pars=c(.1,.1), x0=c(0), model="mk2", br=NULL)
sim.div2 <- sim.character(tree, pars=c(.1,.1), x0=c(0), model="mk2", br=NULL)

char.or <- cbind(sim.div1, sim.div2)
char.or <-apply(char.or, 1, function(x) paste(x, collapse=''))
char.or1 <-dplyr::recode(char.or, '00'='1', '01'='2', '10'='3', '11'='4')
char.or <-cbind(names(char.or), char.or1)

#Qcom <- mk_Qcom(rate1=c(1,1), rate2=c(1,1), names=names(token.maps))
Qcom <- mk_Qcom(rate1=c(1,1), rate2=c(1,1), names=names(token.maps))
Qindv <- mk_Qindv(Qcom)
Qindv$Qcom
Pindv <- mk_Pindv(Qcom, p1=c(0.5,0,0.5,0), p2=c(0.5,.5,0,0), p0=c(1,0,0,0))
#Pindv <- mk_Pindv(Qcom, p1=c(0,0,1,0), p2=c(0,1,0,0), p0=c(1,0,0,0))
#root.p <- c(1, 0,0,0)
#root.p <- 'maddfitz'
root.p <- rep(1/4, 4)


out1a <- runSinba(phy=tree, data=char.or, edge.pattern=NULL,
                  root.p = root.p, Qindv=Qindv, Pindv=Pindv,
                  p = NULL, ip = NULL, lb = 0, ub = 100,
                  cub.method='pcubature', diagn=F, optim.method='subplex', subplex.rounds=1, subplex.n.cores=1L, gensa.its=100)


itre <- iterSearch_Sinba(phy=tree, data=char.or, edge.pattern=NULL, root.p = root.p, Pindv=Pindv,
                             p = NULL, ip = NULL, lb = 0, ub = 100,
                             cub.method='pcubature', diagn=F, optim.method='subplex', subplex.rounds=1, subplex.n.cores=1L, gensa.its=100)

#--
Qcom <- mk_Qcom(rate1=c(1,1), rate2=c(1,1), names=names(token.maps))
Qcom[Qcom==1] <- c(1:8)
Qindv <- mk_Qindv(Qcom)

  out.list <- list()


  out1 <- runSinba(phy=tree, data=char.or, edge.pattern=NULL,
                   root.p = root.p, Qindv=Qindv, Pindv=Pindv,
                   p = NULL, ip = NULL, lb = 0, ub = 100,
                   cub.method='pcubature', diagn=F, optim.method='subplex', subplex.rounds=1, subplex.n.cores=1L, gensa.its=100)

  out.list[[1]] <- out1
  print(out1)
  out <- out1

  i <- 2
  max.par <-  max(Qindv$Qcom)

  while(max.par>1){
    Qcom <- iter_new_Qcom(pars=out$est.pars, Qindv$Qcom)
    Qindv <- mk_Qindv(Qcom)
    #Pindv <- mk_Pindv(Qcom, p1=c(0.5,0,0.5,0), p2=c(0.5,0.5,0,0), p0=c(1,0,0,0))

    # out <- runSinba(phy=phy, data=data, edge.pattern=edge.pattern,
    #                  root.p = root.p, Qindv=Qindv, Pindv=Pindv,
    #                  ...)

    out <- runSinba(phy=tree, data=char.or, edge.pattern=NULL,
                    root.p = root.p, Qindv=Qindv, Pindv=Pindv,
                    p = NULL, ip = NULL, lb = 0, ub = 100,
                    cub.method='pcubature', diagn=F, optim.method='subplex', subplex.rounds=1, subplex.n.cores=1L, gensa.its=100)


    print(out)
    out.list[[i]] <- out
    i <- i+1
    max.par <-  max(Qindv$Qcom)

  }


 #--
  akaike.weights(c(out1a$AIC, out.list[[6]]$AIC))
  ll <- lapply(out.list, function(x) x$AIC) %>% unlist
  w <- akaike.weights(c(out1a$AIC, ll))

#-- COrr

Q.cor <- out.list[[4]]$Qindv$Qcom
Q.cor[Q.cor==0] <- NA
Recon_Q.Sim <- rayDISC(tree, char.or, rate.mat=Q.cor, node.states="marginal",
                         model="ARD", root.p=rep(1/4,4))

log(1000)*2-2*-1268.202
log(1000)*1-2*-1270.037
#-----------------------
Q1 <- out.list[[8]]$solution
Q1[is.na(Q1)] <- 0
diag(Q1) <- -rowSums(Q1)

Q2 <- out.list[[6]]$solution
Q2[is.na(Q2)] <- 0
diag(Q2) <- -rowSums(Q2)


err_exp <- function(Q1, Q2, t){
  err <- expm::expm(Q1*t, method ='Ward77') - expm::expm(Q2*t, method ='Ward77')
  out <- abs(err)%>%max
  out
}

err_exp_vec <- Vectorize(err_exp, vectorize.args ='t')

y <- err_exp_vec(Q1,Q2, t=seq(0,50,0.1))
plot(seq(0,50,0.1), y)
