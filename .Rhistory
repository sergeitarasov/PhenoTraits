ln<- sapply(kl.sim, function(x) x$loglik) %>% t
K.mean <- sapply(kl.sim, function(x) x$KL_K.mean)
K.mean
K <- sapply(kl.sim, function(x) x$K) %>% t
K
best.K <- apply(K, 2, function(x) which(x==max(x)))
best.K
K <- sapply(kl.sim, function(x) x$K) %>% t
K
best.K <- apply(K, 2, function(x) which(x==max(x)))
best.K
K
best.K <- apply(K, 2, function(x) which(x==max(x)))
best.K
best.K <- apply(K, 2, function(x) which(x==max(x))) %>% unlist
best.K
delta.K <- apply(K, 2, function(x) x[1]-max(x) )
delta.K
(delta.K[delta.K>3]) %>% length
delta.K <- apply(K, 2, function(x) x[1]+max(x) )
delta.K
delta.K <- apply(K, 2, function(x) x[1]-max(x) )
delta.K <- apply(K, 2, function(x) x[1]-max(x) )*-1
delta.K
(delta.K[delta.K>3]) %>% length
max(delta.K)
bic
np
npar
log(10)
log(10) %>% log
log(1000) %>% log
log(1000)
aic
ln
out1
dim.dat <- 100*2
log(log(1000))
log(1000)
2*(log(log(1000)))
(log(log(1000)))
log(1000)
log(2000)
best.bic
delta.bic <- apply(bic, 2, function(x) x[1]-min(x) )
which(delta.bic>3) %>% length()
kl.sim
bic.n <- sapply(kl.sim, function(x) x$bic.nsite) %>% t
best.bic.n <- apply(bic.n, 2, function(x) which(x==min(x)))
best.bic.n
delta.bic.n <- apply(bic.n, 2, function(x) x[1]-min(x) )
which(delta.bic.n>3) %>% length()
max(delta.bic.n)
#Q.list[[2]]
# likelihood Inference
#runExpLinLn(Qcom=Q.list[[1]], t=t, p.root=pi, data=sim.multi[[1]], start.val=1)
runExpLinLn <- function(Qcom, t=1, p.root=c(1/4, 1/4, 1/4, 1/4), data, start.val=1){
out1<-data$char1
out2<-data$char2
Qindv <- mk_Qindv(Qcom)
Qrate <- mk_RatePars(Qindv)
Qfin <- Qrate$Qcom
opts <- list(
algorithm = "NLOPT_LN_SBPLX", maxeval = "1000000",
ftol_rel = .Machine$double.eps^0.5
)
np <- max(Qfin) -1
ip <- rep(start.val, np)
lower <- rep(0, np)
upper <- rep(100, np)
out <- nloptr(
x0 = ip,
eval_f = ExpLinLn, lb = lower, ub = upper,
opts = opts,
out1=out1, out2=out2, Qfin=Qfin, t=t, pi=p.root
)
loglik <- -out$objective
est.pars <- out$solution
solution <- matrix(est.pars[Qfin], dim(Qfin))
#----- Empirical BIC
# empirical I.hat
h <- numDeriv::hessian(func = ExpLinLn, x = est.pars,
out1=out1, out2=out2, Qfin=Qfin, t=t, pi=p.root
)
BICemp <- loglik - (log(det(h))/2)
# #- Tic
# grad.sep <- lapply(1:ncol(out1), function(x)  numDeriv::grad(func = ExpLinLn, x = est.pars, out1=out1[,x], out2=out2[,x], Qfin=Qfin, t=t, pi=p.root) * -1 )
# J.hat.sep <- lapply(grad.sep, function(x) x %*% t(x))
# J.hat.sep <- Reduce("+", J.hat.sep)
# TIC.d <- J.hat.sep %*% solve(h) %>% diag %>% sum
# #-- Tic Correct for Normal
# #I.hat <- numDeriv::hessian(LikNorm, x=p.hat, dat=dat)
# # grad.sep <- lapply(1:n.dat, function(x) numDeriv::grad(LikNorm, x=p.hat, dat=dat[x])*-1)
# # J.hat.sep <- lapply(grad.sep, function(x) x %*% t(x))
# # J.hat.sep <- Reduce("+", J.hat.sep)
# # J.hat.sep %*% solve(I.hat) %>% diag %>% sum
# #----
#--- EDC
EDC1 <- -2*loglik + (np*log(log(2*ncol(out1))))
EDC2 <- -2*loglik + (2*np*log(log(2*ncol(out1))))
#---------
Qfull <- solution
Qfull[is.na(Qfull)] <- 0
diag(Qfull)<- -rowSums(Qfull)
X <- list(loglik=loglik, n.par=np,  AIC = -2 * loglik + 2 * np,
AICc = -2 * loglik + (2 * np * (ncol(out1) / (ncol(out1) - np - 1))),
BIC.nsites= (np*log(ncol(out1)))-2*loglik,
BIC= (np*log(2*ncol(out1)))-2*loglik,
BICemp=BICemp,
Hessian=h,
TIC.d= NA, #TIC.d,
TIC= NA, #-2 * loglik+(2*TIC.d),
EDC1=EDC1,
EDC2=EDC2,
Q=solution,
Qcom=Qcom,
Qfull= Qfull,
est.pars=est.pars)
return(X)
}
# infr <- mclapply(
#   Q.list, function(x) runExpLinLn(x, t=t, p.root=c(1/4, 1/4, 1/4, 1/4), data=simL, start.val=1),
#   mc.cores = 10
# )
#expected_KL(sim.multi, Qcom=xx, Qsim=Qsim, t=1, pi=p.root)
expected_KL <- function(sim.multi, Qsim, Qcom, t, pi){
n.sim <- length(sim.multi)
# 2 run inference for 100
r100 <- lapply(1:n.sim, function(xx)
runExpLinLn(Qcom, t=t, p.root=pi, data=sim.multi[[xx]], start.val=1) )
# 3 get pred distr
D.true <- getPhyloCTMC_distr(Qsim, t=t)
D.pred <- lapply(r100, function(x) getPhyloCTMC_distr(x$Qfull, t=t) )
#4. clac KL smple and get mean
KL <- sapply(1:n.sim, function(x) KLD_phylo(D.true, D.pred[[x]]) )
KL_K <- sapply(1:n.sim, function(x) KLD_K_phylo(D.true, D.pred[[x]]) )
list(
KL=KL,
K=KL_K,
KL.mean=mean(KL),
KL_K.mean=mean(KL_K),
aic = lapply(r100, function(x) x$AIC ) %>% unlist,
bic = lapply(r100, function(x) x$BIC ) %>% unlist,
bic.nsite = lapply(r100, function(x) x$BIC.nsites ) %>% unlist,
loglik = lapply(r100, function(x) x$loglik ) %>% unlist,
tic.d=NA, #lapply(r100, function(x) x$TIC.d ) %>% unlist,
tic=NA, #lapply(r100, function(x) x$TIC ) %>% unlist,
EDC1=lapply(r100, function(x) x$EDC1 ) %>% unlist,
EDC2=lapply(r100, function(x) x$EDC2 ) %>% unlist,
n.par=Qcom[Qcom>0] %>% unique() %>% length()
)
}
kl.sim <- mclapply(
Q.list, function(xx) expected_KL(sim.multi, Qcom=xx, Qsim=Qsim, t=1, pi=p.root),
mc.cores = 10
)
##-----
#sim.multi[[1]]$char1 %>% dim
dim.dat <- 1000*2
ln<- sapply(kl.sim, function(x) x$loglik) %>% t
K.mean <- sapply(kl.sim, function(x) x$KL_K.mean)
K <- sapply(kl.sim, function(x) x$K) %>% t
best.K <- apply(K, 2, function(x) which(x==max(x))) %>% unlist
delta.K <- apply(K, 2, function(x) x[1]-max(x) )*-1
(delta.K[delta.K>3]) %>% length
max(delta.K)
npar <- sapply(kl.sim, function(x) x$n.par)
dim.dat <- 1
1/dim.dat
K.hat <- ln/dim.dat
mean(K[1,]-K.mean[1])
Exp.K <- sapply(1:nrow(K),  function(x) mean(K[x,]-K.mean[x]) )
plot(Exp.K, (npar/dim.dat) )
aic <- sapply(kl.sim, function(x) x$aic) %>% t
apply(aic, 1, mean)
best.aic <- apply(aic, 2, function(x) which(x==min(x)))
best.aic
delta.aic <- apply(aic, 2, function(x) x[1]-min(x) )
(delta.aic[delta.aic>3]) %>% length
max(delta.aic)
which(delta.aic==max(delta.aic))
kl <- sapply(kl.sim, function(x) x$KL) %>% t
hist(kl[2,])
log(kl)
best.kl <- apply(kl, 2, function(x) which(x==min(x)))
best.kl[best.kl!=1] %>% length
bic <- sapply(kl.sim, function(x) x$bic) %>% t
best.bic <- apply(bic, 2, function(x) which(x==min(x)))
best.bic
delta.bic <- apply(bic, 2, function(x) x[1]-min(x) )
which(delta.bic>3) %>% length()
max(delta.bic)
bic.n <- sapply(kl.sim, function(x) x$bic.nsite) %>% t
best.bic.n <- apply(bic.n, 2, function(x) which(x==min(x)))
delta.bic.n <- apply(bic.n, 2, function(x) x[1]-min(x) )
which(delta.bic.n>3) %>% length()
max(delta.bic.n)
edc1 <- sapply(kl.sim, function(x) x$EDC1) %>% t
best.edc1 <- apply(edc1, 2, function(x) which(x==min(x)))
delta.edc1 <- apply(edc1, 2, function(x) x[1]-min(x) )
best.edc1
edc1 <- sapply(kl.sim, function(x) x$EDC2) %>% t
best.edc1 <- apply(edc1, 2, function(x) which(x==min(x)))
best.edc1
delta.bic
best.bic
#Q.list[[2]]
# likelihood Inference
#runExpLinLn(Qcom=Q.list[[1]], t=t, p.root=pi, data=sim.multi[[1]], start.val=1)
runExpLinLn <- function(Qcom, t=1, p.root=c(1/4, 1/4, 1/4, 1/4), data, start.val=1){
out1<-data$char1
out2<-data$char2
Qindv <- mk_Qindv(Qcom)
Qrate <- mk_RatePars(Qindv)
Qfin <- Qrate$Qcom
opts <- list(
algorithm = "NLOPT_LN_SBPLX", maxeval = "1000000",
ftol_rel = .Machine$double.eps^0.5
)
np <- max(Qfin) -1
ip <- rep(start.val, np)
lower <- rep(0, np)
upper <- rep(100, np)
out <- nloptr(
x0 = ip,
eval_f = ExpLinLn, lb = lower, ub = upper,
opts = opts,
out1=out1, out2=out2, Qfin=Qfin, t=t, pi=p.root
)
loglik <- -out$objective
est.pars <- out$solution
solution <- matrix(est.pars[Qfin], dim(Qfin))
#----- Empirical BIC
# empirical I.hat
h <- numDeriv::hessian(func = ExpLinLn, x = est.pars,
out1=out1, out2=out2, Qfin=Qfin, t=t, pi=p.root
)
BICemp <- loglik - (log(det(h))/2)
# #- Tic
# grad.sep <- lapply(1:ncol(out1), function(x)  numDeriv::grad(func = ExpLinLn, x = est.pars, out1=out1[,x], out2=out2[,x], Qfin=Qfin, t=t, pi=p.root) * -1 )
# J.hat.sep <- lapply(grad.sep, function(x) x %*% t(x))
# J.hat.sep <- Reduce("+", J.hat.sep)
# TIC.d <- J.hat.sep %*% solve(h) %>% diag %>% sum
# #-- Tic Correct for Normal
# #I.hat <- numDeriv::hessian(LikNorm, x=p.hat, dat=dat)
# # grad.sep <- lapply(1:n.dat, function(x) numDeriv::grad(LikNorm, x=p.hat, dat=dat[x])*-1)
# # J.hat.sep <- lapply(grad.sep, function(x) x %*% t(x))
# # J.hat.sep <- Reduce("+", J.hat.sep)
# # J.hat.sep %*% solve(I.hat) %>% diag %>% sum
# #----
#--- EDC
EDC1 <- -2*loglik + (np*log(log(2*ncol(out1))))
EDC2 <- -2*loglik + (2*np*log(log(2*ncol(out1))))
#---------
Qfull <- solution
Qfull[is.na(Qfull)] <- 0
diag(Qfull)<- -rowSums(Qfull)
X <- list(loglik=loglik, n.par=np,  AIC = -2 * loglik + 2 * np,
AICc = -2 * loglik + (2 * np * (ncol(out1) / (ncol(out1) - np - 1))),
BIC.nsites= (np*log(ncol(out1)))-2*loglik,
BIC= (np*log(2*ncol(out1)))-2*loglik,
BIC2= (2*np*log(2*ncol(out1)))-2*loglik,
CAIC= (np*log((2*ncol(out1)) + 1))-2*loglik,
BICemp=BICemp,
Hessian=h,
TIC.d= NA, #TIC.d,
TIC= NA, #-2 * loglik+(2*TIC.d),
EDC1=EDC1,
EDC2=EDC2,
Q=solution,
Qcom=Qcom,
Qfull= Qfull,
est.pars=est.pars)
return(X)
}
# infr <- mclapply(
#   Q.list, function(x) runExpLinLn(x, t=t, p.root=c(1/4, 1/4, 1/4, 1/4), data=simL, start.val=1),
#   mc.cores = 10
# )
#expected_KL(sim.multi, Qcom=xx, Qsim=Qsim, t=1, pi=p.root)
expected_KL <- function(sim.multi, Qsim, Qcom, t, pi){
n.sim <- length(sim.multi)
# 2 run inference for 100
r100 <- lapply(1:n.sim, function(xx)
runExpLinLn(Qcom, t=t, p.root=pi, data=sim.multi[[xx]], start.val=1) )
# 3 get pred distr
D.true <- getPhyloCTMC_distr(Qsim, t=t)
D.pred <- lapply(r100, function(x) getPhyloCTMC_distr(x$Qfull, t=t) )
#4. clac KL smple and get mean
KL <- sapply(1:n.sim, function(x) KLD_phylo(D.true, D.pred[[x]]) )
KL_K <- sapply(1:n.sim, function(x) KLD_K_phylo(D.true, D.pred[[x]]) )
list(
KL=KL,
K=KL_K,
KL.mean=mean(KL),
KL_K.mean=mean(KL_K),
aic = lapply(r100, function(x) x$AIC ) %>% unlist,
bic = lapply(r100, function(x) x$BIC ) %>% unlist,
bic.nsite = lapply(r100, function(x) x$BIC.nsites ) %>% unlist,
loglik = lapply(r100, function(x) x$loglik ) %>% unlist,
tic.d=NA, #lapply(r100, function(x) x$TIC.d ) %>% unlist,
tic=NA, #lapply(r100, function(x) x$TIC ) %>% unlist,
EDC1=lapply(r100, function(x) x$EDC1 ) %>% unlist,
EDC2=lapply(r100, function(x) x$EDC2 ) %>% unlist,
BIC2=lapply(r100, function(x) x$BIC2 ) %>% unlist,
CAIC=lapply(r100, function(x) x$CAIC ) %>% unlist,
n.par=Qcom[Qcom>0] %>% unique() %>% length()
)
}
kl.sim <- mclapply(
Q.list, function(xx) expected_KL(sim.multi, Qcom=xx, Qsim=Qsim, t=1, pi=p.root),
mc.cores = 10
)
##-----
#sim.multi[[1]]$char1 %>% dim
dim.dat <- 1000*2
ln<- sapply(kl.sim, function(x) x$loglik) %>% t
K.mean <- sapply(kl.sim, function(x) x$KL_K.mean)
K <- sapply(kl.sim, function(x) x$K) %>% t
best.K <- apply(K, 2, function(x) which(x==max(x))) %>% unlist
delta.K <- apply(K, 2, function(x) x[1]-max(x) )*-1
(delta.K[delta.K>3]) %>% length
aic <- sapply(kl.sim, function(x) x$aic) %>% t
apply(aic, 1, mean)
best.aic <- apply(aic, 2, function(x) which(x==min(x)))
delta.aic <- apply(aic, 2, function(x) x[1]-min(x) )
(delta.aic[delta.aic>3]) %>% length
max(delta.aic)
which(delta.aic==max(delta.aic))
(delta.aic[delta.aic>3]) %>% length
bic <- sapply(kl.sim, function(x) x$bic) %>% t
plot(aic[,1], bic[,1])
plot(bic[,8], kl.m)
plot(bic[,2], kl[,2])
best.bic <- apply(bic, 2, function(x) which(x==min(x)))
delta.bic <- apply(bic, 2, function(x) x[1]-min(x) )
which(delta.bic>3) %>% length()
edc1 <- sapply(kl.sim, function(x) x$EDC2) %>% t
best.edc1 <- apply(edc1, 2, function(x) which(x==min(x)))
delta.edc1 <- apply(edc1, 2, function(x) x[1]-min(x) )
which(delta.bic>3) %>% length()
best.edc1
bic2 <- sapply(kl.sim, function(x) x$BIC2) %>% t
best.bic2 <- apply(bic2, 2, function(x) which(x==min(x)))
best.bic2
delta.bic <- apply(bic2, 2, function(x) x[1]-min(x) )
which(delta.bic2>3) %>% length()
max(delta.bic2)
caic <- sapply(kl.sim, function(x) x$CAIC) %>% t
best.caic <- apply(caic, 2, function(x) which(x==min(x)))
best.caic
delta.caic <- apply(caic, 2, function(x) x[1]-min(x) )
which(delta.caic>3) %>% length()
max(delta.caic)
ln<- sapply(kl.sim, function(x) x$loglik) %>% t
#-- Ln ration
ln
#-- Ln ration
npar
ln[1,]-ln[2,]
ra <- ln[1,]-ln[2,]
hist(ra)
ra <- ln[2,]-ln[1,]
hist(ra)
ra
all(ra>0)
all(ra>0)
hist(ra, breaks=30)
#-- Ln ration
npar
ra <- ln[15,]-ln[1,]
all(ra>0)
hist(ra, breaks=30)
ra <- ln[14,]-ln[1,]
all(ra>0)
hist(ra, breaks=30)
ra <- ln[15,]-ln[1,]
all(ra>0)
hist(ra, breaks=30)
ra <- (ln[1,]-ln[15,])*-2
all(ra>0)
hist(ra, breaks=30)
x <- seq(0, 15, 0.1)
y <- dchisq(x, df=3)
lines(x, y)
hist(ra, breaks=30, freq = T)
lines(x, y)
hist(ra, breaks=30, freq = F)
x <- seq(0, 15, 0.1)
y <- dchisq(x, df=3)
lines(x, y)
hist(ln[15,]-ln[1,])
hist(ln[15,]-ln[1,], breaks = 30)
hist(ra, breaks=30, freq = F)
pchisq(16, df=3)
1-pchisq(16, df=3)
ra0 <- ln[15,]-ln[1,]
hist(ra0-6, breaks = 30)
1-pchisq(8, df=1)
60/500
ra <- (ln[1,]-ln[2,])*-2
all(ra>0)
hist(ra, breaks=30, freq = F)
1-pchisq(12, df=2)
1-pchisq(4, df=0)
1-pchisq(4, df=1)
daic <- aic[1,]-aic[15,]
daic
hist(daic)
ra <- (ln[1,]-ln[15,])*-2
all(ra>0)
hist(ra, breaks=30, freq = F)
daic <- aic[1,]-aic[15,]
hist(daic)
hist(daic, breaks=30, freq = F)
which(daic>2)
which(daic>2) %>% length()
which(daic>2) %>% length()/500
which(daic>2) %>% length(.)/500
26/5
26/500
daic
ra0 <- ln[15,]-ln[1,]
which(ra0>8) %>% length(.)/500
-2*ln[1,]+2
(-2*ln[1,]+2) - aic[1,]
(-2*ln[15,]+8) - aic[15,]
which(ra0>5) %>% length(.)/500
which(daic>2) %>% length(.)/500
hist(ra0, breaks = 30)
ra0 <- ln[15,]-ln[1,]
which(ra0>5) %>% length(.)/500
which(ra0>5)
which(daic>2)
which(ra0>4)
which(ra0>4) %>% length(.)/500
which(ra>8) %>% length(.)/500
1-pchisq(8, df=3)
1-pchisq(7, df=3)
1-pchisq(7.5, df=3)
1-pchisq(7.9, df=3)
1-pchisq(8, df=3)
daic <- aic[1,]-aic[2,]
which(daic>2) %>% length(.)/500
daic <- aic[1,]-aic[3,]
which(daic>2) %>% length(.)/500
daic <- aic[1,]-aic[14,]
which(daic>2) %>% length(.)/500
daic <- aic[1,]-aic[13,]
which(daic>2) %>% length(.)/500
daic <- aic[1,]-aic[15,]
which(daic>2) %>% length(.)/500
hist(daic, breaks=30, freq = F)
apply(aic, 1, function(x) {daic <- aic[1,]-x; which(daic>2) %>% length(.)/500})
aic <- sapply(kl.sim, function(x) x$aic) %>% t
apply(aic, 1, mean)
best.aic <- apply(aic, 2, function(x) which(x==min(x)))
delta.aic <- apply(aic, 2, function(x) x[1]-min(x) )
(delta.aic[delta.aic>3]) %>% length
(delta.aic[delta.aic>2]) %>% length
max(delta.aic)
(delta.aic[delta.aic>2]) %>% length
98/500
aic <- sapply(kl.sim, function(x) x$aic) %>% t
apply(aic, 1, mean)
best.aic <- apply(aic, 2, function(x) which(x==min(x)))
delta.aic <- apply(aic, 2, function(x) x[1]-min(x) )
(delta.aic[delta.aic>2]) %>% length
max(delta.aic)
which(delta.aic==max(delta.aic))
delta.aic
98/500
1-pchisq(8, df=3)
apply(aic, 1, function(x) {daic <- aic[1,]-x; which(daic>2) %>% length(.)/500})
delta.aic
apply(aic, 2, function(x) which(x[1]-x > 2) )
apply(aic, 2, function(x) which(x[1]-x > 2) ) %>% unlist
apply(aic, 2, function(x) which(x[1]-x > 2) %>% length )
delta.aic
apply(aic, 1, function(x) {daic <- aic[1,]-x; which(daic>2) %>% length(.)})
apply(aic, 1, function(x) {daic <- aic[1,]-x; which(daic>2) %>% length(.)}) %>% sum
apply(aic, 1, function(x) {daic <- aic[1,]-x; which(daic>2) %>% length(.)}) %>% sum/500
apply(aic, 1, function(x) {daic <- aic[1,]-x; which(daic>2) %>% length(.)}) %>% 500
apply(aic, 1, function(x) {daic <- aic[1,]-x; which(daic>2) %>% length(.)}) / 500
apply(aic, 1, function(x) {daic <- aic[1,]-x; which(daic>2) %>% length(.)})
apply(aic, 2, function(x) which(x[1]-x > 2) %>% length )
zz <- apply(aic, 2, function(x) which(x[1]-x > 2) %>% length )
zz[zz>0]
zz[zz>0] %>% sum
0.5*14
0.05*14
0.4*15
0.04*14
0.04*1000
0.96*14
0.96^14
0.95^14
0.96^100
0.96^1000
?fithc
??fithc
corHMM::fithc
corHMM:::fithc
library("phangorn", lib.loc="~/Library/R/3.6/library")
?fithc
phangorn:::fithc
phangorn::fithc
phangorn:::fithc
phangorn:::fithc
library("PhenoTraits", lib.loc="~/Library/R/3.6/library")
install.packages("drake")
library("drake", lib.loc="~/Library/R/3.6/library")
